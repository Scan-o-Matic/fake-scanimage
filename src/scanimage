#!/usr/bin/env python3
from datetime import datetime, date
from glob import glob
import json
import os
import sys

_DATETIME_FORMAT = "%Y-%m-%dT%H:%M:%S.%fZ"


def get_history_file():
    return os.getenv(
        'FAKE_SCANIMAGE_HISTORY',
        '/tmp/fake_scanimage_history.json',
    )


def get_data_directory():
    return os.getenv(
        'FAKE_SCANIMAGE_DATA',
        os.path.join(os.path.dirname(__file__), 'data'),
    )


def _json_serial(obj):
    """JSON serializer for objects not serializable by default json code"""

    if isinstance(obj, (datetime, date)):
        return obj.strftime(_DATETIME_FORMAT)
    raise TypeError("Type %s not serializable" % type(obj))


def get_stored_history():
    try:
        with open(get_history_file()) as fh:
            data = json.load(fh)
    except (OSError, json.decoder.JSONDecodeError):
        data = {'scans': []}

    data['scans'] = [
        datetime.strptime(v, _DATETIME_FORMAT) for v in data['scans']
    ]
    return data


def dump_history(history):
    with open(get_history_file(), 'w') as fh:
        json.dump(history, fh, default=_json_serial)


def is_in_sequence(history, image_paths):
    scans = history.get('scans', [])
    if len(scans) >= len(image_paths):
        return False
    elif len(scans) < 2:
        return True

    history_delta = (scans[-1] - scans[-2]).total_seconds()
    cur_delta = (datetime.utcnow() - scans[-1]).total_seconds()
    return 0.5 < cur_delta / history_delta < 2


def get_scans():
    return sorted(glob(os.path.join(get_data_directory(), '*.tiff')))


def scan():
    history = get_stored_history()
    scans = get_scans()
    if not is_in_sequence(history, scans):
        history['scans'] = []
    idx = len(history['scans'])
    history['scans'].append(datetime.utcnow())
    dump_history(history)
    with open(scans[idx], 'rb') as f:
        sys.stdout.buffer.write(f.read())


if __name__ == "__main__":
    flag = sys.argv[1] if len(sys.argv) > 1 else ''
    if flag == '-V':
        print(
            "scanimage (sane-backends) 1.0.27; backend version 1.0.27 (fake)"
        )
    elif flag == '-L':
        print(
            "device `epson2:libusb:001:083' is a Epson GT-X980 flatbed scanner"
        )
    elif flag == '-f':
        print("epson2:libusb:001:083")
    else:
        scan()
